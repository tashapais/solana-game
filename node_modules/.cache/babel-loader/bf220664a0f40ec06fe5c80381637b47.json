{"ast":null,"code":"import { SystemProgram, Transaction } from '@solana/web3.js';\n\nconst createTransferTransaction = async (ownerPubkey, connection, fromTokenAccountPubkey, toTokenAccountPubkey, tokenToTransferLamports) => {\n  let transaction = new Transaction().add(SystemProgram.transfer({\n    fromPubkey: fromTokenAccountPubkey,\n    toPubkey: toTokenAccountPubkey,\n    lamports: tokenToTransferLamports\n  }));\n  transaction.feePayer = ownerPubkey;\n  console.log('Getting recent blockhash');\n  transaction.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n  return transaction;\n};\n/**\n * This utility function will transfer the token from one user wallet to another user's wallet\n * @param {*} provider : provider of the phantom wallet\n * @param {*} connection : connection to the solana cluster\n * @param {*} tokenToTransfer : tokens to be transferred in lamports\n * @param {*} fromTokenAccountPubkey : sender of the token\n * @param {*} toTokenAccountPubkey : receiver of the token\n * @returns \n */\n\n\nexport const transferCustomToken = async (provider, connection, tokenToTransfer, fromTokenAccountPubkey, toTokenAccountPubkey) => {\n  if (tokenToTransfer <= 0) {\n    return {\n      status: false,\n      error: \"You can not transfer, Token to transfer should be greater than 0.\"\n    };\n  }\n\n  const tokenToTransferLamports = tokenToTransfer * 1000000000;\n  const transaction = await createTransferTransaction(provider.publicKey, connection, fromTokenAccountPubkey, toTokenAccountPubkey, tokenToTransferLamports);\n\n  if (transaction) {\n    try {\n      let signed = await provider.signTransaction(transaction);\n      console.log('Got signature, submitting transaction');\n      let signature = await connection.sendRawTransaction(signed.serialize());\n      console.log('Submitted transaction ' + signature + ', awaiting confirmation');\n      await connection.confirmTransaction(signature);\n      console.log('Transaction ' + signature + ' confirmed');\n      return {\n        status: true,\n        signature\n      };\n    } catch (e) {\n      console.warn(e);\n      console.log('Error: ' + e.message);\n      return {\n        status: false,\n        error: e.message\n      };\n    }\n  }\n\n  return {\n    status: false,\n    error: \"No transaction found\"\n  };\n};","map":{"version":3,"sources":["/Users/tashapais/Documents/Github/solana-games/src/utils/transferToken.js"],"names":["SystemProgram","Transaction","createTransferTransaction","ownerPubkey","connection","fromTokenAccountPubkey","toTokenAccountPubkey","tokenToTransferLamports","transaction","add","transfer","fromPubkey","toPubkey","lamports","feePayer","console","log","recentBlockhash","getRecentBlockhash","blockhash","transferCustomToken","provider","tokenToTransfer","status","error","publicKey","signed","signTransaction","signature","sendRawTransaction","serialize","confirmTransaction","e","warn","message"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,WAAxB,QAA2C,iBAA3C;;AAEA,MAAMC,yBAAyB,GAAG,OAAOC,WAAP,EAAoBC,UAApB,EAAgCC,sBAAhC,EAAwDC,oBAAxD,EAA8EC,uBAA9E,KAA0G;AAE1I,MAAIC,WAAW,GAAG,IAAIP,WAAJ,GAAkBQ,GAAlB,CAChBT,aAAa,CAACU,QAAd,CAAuB;AACrBC,IAAAA,UAAU,EAAEN,sBADS;AAErBO,IAAAA,QAAQ,EAAEN,oBAFW;AAGrBO,IAAAA,QAAQ,EAAEN;AAHW,GAAvB,CADgB,CAAlB;AAOAC,EAAAA,WAAW,CAACM,QAAZ,GAAuBX,WAAvB;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAR,EAAAA,WAAW,CAACS,eAAZ,GAA8B,CAC5B,MAAMb,UAAU,CAACc,kBAAX,EADsB,EAE5BC,SAFF;AAGA,SAAOX,WAAP;AACD,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMY,mBAAmB,GAAG,OAAOC,QAAP,EAAiBjB,UAAjB,EAA6BkB,eAA7B,EAA8CjB,sBAA9C,EAAsEC,oBAAtE,KAA+F;AAEhI,MAAIgB,eAAe,IAAI,CAAvB,EAA0B;AACxB,WAAO;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,KAAK,EAAE;AAAxB,KAAP;AACD;;AACD,QAAMjB,uBAAuB,GAAGe,eAAe,GAAG,UAAlD;AACA,QAAMd,WAAW,GAAG,MAAMN,yBAAyB,CAACmB,QAAQ,CAACI,SAAV,EAAqBrB,UAArB,EAAiCC,sBAAjC,EAAyDC,oBAAzD,EAA+EC,uBAA/E,CAAnD;;AAEA,MAAIC,WAAJ,EAAiB;AACf,QAAI;AACF,UAAIkB,MAAM,GAAG,MAAML,QAAQ,CAACM,eAAT,CAAyBnB,WAAzB,CAAnB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AAEA,UAAIY,SAAS,GAAG,MAAMxB,UAAU,CAACyB,kBAAX,CAA8BH,MAAM,CAACI,SAAP,EAA9B,CAAtB;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BY,SAA3B,GAAuC,yBAAnD;AAEA,YAAMxB,UAAU,CAAC2B,kBAAX,CAA8BH,SAA9B,CAAN;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBY,SAAjB,GAA6B,YAAzC;AAEA,aAAO;AAAEL,QAAAA,MAAM,EAAE,IAAV;AAAgBK,QAAAA;AAAhB,OAAP;AAED,KAZD,CAYE,OAAOI,CAAP,EAAU;AAEVjB,MAAAA,OAAO,CAACkB,IAAR,CAAaD,CAAb;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAYgB,CAAC,CAACE,OAA1B;AACA,aAAO;AAAEX,QAAAA,MAAM,EAAE,KAAV;AAAiBC,QAAAA,KAAK,EAAEQ,CAAC,CAACE;AAA1B,OAAP;AACD;AACF;;AACD,SAAO;AACLX,IAAAA,MAAM,EAAE,KADH;AAELC,IAAAA,KAAK,EAAE;AAFF,GAAP;AAID,CAhCM","sourcesContent":["import { SystemProgram, Transaction } from '@solana/web3.js'\n\nconst createTransferTransaction = async (ownerPubkey, connection, fromTokenAccountPubkey, toTokenAccountPubkey, tokenToTransferLamports) => {\n\n  let transaction = new Transaction().add(\n    SystemProgram.transfer({\n      fromPubkey: fromTokenAccountPubkey,\n      toPubkey: toTokenAccountPubkey,\n      lamports: tokenToTransferLamports\n    })\n  );\n  transaction.feePayer = ownerPubkey;\n  console.log('Getting recent blockhash');\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash()\n  ).blockhash;\n  return transaction;\n};\n\n/**\n * This utility function will transfer the token from one user wallet to another user's wallet\n * @param {*} provider : provider of the phantom wallet\n * @param {*} connection : connection to the solana cluster\n * @param {*} tokenToTransfer : tokens to be transferred in lamports\n * @param {*} fromTokenAccountPubkey : sender of the token\n * @param {*} toTokenAccountPubkey : receiver of the token\n * @returns \n */\n\nexport const transferCustomToken = async (provider, connection, tokenToTransfer, fromTokenAccountPubkey, toTokenAccountPubkey) => {\n\n  if (tokenToTransfer <= 0) {\n    return { status: false, error: \"You can not transfer, Token to transfer should be greater than 0.\" }\n  }\n  const tokenToTransferLamports = tokenToTransfer * 1000000000\n  const transaction = await createTransferTransaction(provider.publicKey, connection, fromTokenAccountPubkey, toTokenAccountPubkey, tokenToTransferLamports);\n\n  if (transaction) {\n    try {\n      let signed = await provider.signTransaction(transaction);\n      console.log('Got signature, submitting transaction');\n\n      let signature = await connection.sendRawTransaction(signed.serialize());\n      console.log('Submitted transaction ' + signature + ', awaiting confirmation');\n\n      await connection.confirmTransaction(signature);\n      console.log('Transaction ' + signature + ' confirmed');\n\n      return { status: true, signature }\n\n    } catch (e) {\n      \n      console.warn(e);\n      console.log('Error: ' + e.message);\n      return { status: false, error: e.message }\n    }\n  }\n  return {\n    status: false,\n    error: \"No transaction found\"\n  }\n}\n"]},"metadata":{},"sourceType":"module"}