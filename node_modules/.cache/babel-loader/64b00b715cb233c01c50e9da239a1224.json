{"ast":null,"code":"import axios from 'axios';\nimport * as openpgp from 'openpgp';\nimport { v4 as uuidv4 } from 'uuid';\n/**\n  * CircleAPI implementation\n  * @returns \n  */\n\nexport const circleAPIBase = 'https://api-sandbox.circle.com';\nexport const backendBase = process.env.REACT_APP_BASE_APP;\nexport const circleAPIAuthToken = process.env.REACT_APP_CIRCLE_API_AUTH_KEY;\nexport const fetchPCIKeys = async () => {\n  try {\n    /**\n     * API call to fetch the encryption key based on the token provided\n     */\n    let config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    const result = await axios.get(`${circleAPIBase}/v1/encryption/public`, config);\n    const encryptionPublicKey = result.data.data.publicKey;\n    const keyId = result.data.data.keyId;\n    return {\n      encryptionPublicKey,\n      keyId,\n      status: true\n    };\n  } catch (err) {\n    return {\n      status: true,\n      error: err\n    };\n  }\n};\nexport const makePayment = async paymentParams => {\n  try {\n    const keyId = paymentParams.keyId;\n    const publicKey = paymentParams.encryptionPublicKey;\n    const amount = paymentParams.amount;\n    const key = {\n      keyId,\n      publicKey\n    };\n    const exampleCards = [{\n      title: '4007400000000007 (visa)',\n      formData: {\n        cardNumber: '4007400000000007',\n        cvv: '123',\n        expiry: {\n          month: '01',\n          year: '2025'\n        },\n        name: 'Customer 0001',\n        country: 'US',\n        district: 'MA',\n        line1: 'Test',\n        line2: '',\n        city: 'Test City',\n        postalCode: '11111',\n        phoneNumber: '+12025550180',\n        email: 'customer-0001@circle.com'\n      }\n    }];\n    const tempDetails = {\n      number: exampleCards[0].formData.cardNumber.trim().replace(/\\D/g, ''),\n      cvv: exampleCards[0].formData.cvv\n    };\n\n    if (!publicKey || !keyId) {\n      throw new Error('Unable to encrypt data');\n    } //atob\n\n\n    const decodedPublicKey = Buffer.from(publicKey, 'base64').toString('binary');\n    const options = {\n      message: await openpgp.message.fromText(JSON.stringify(tempDetails)),\n      publicKeys: (await openpgp.key.readArmored(decodedPublicKey)).keys\n    };\n    const ciphertext = await openpgp.encrypt(options); //btoa\n\n    const encryptedMessage = Buffer.from(ciphertext.data).toString('base64');\n    /**\n    * API call to save the card details\n    */\n\n    const cardDetails = {\n      \"idempotencyKey\": `${uuidv4()}`,\n      \"expMonth\": 1,\n      \"expYear\": 2025,\n      \"keyId\": `${keyId}`,\n      \"encryptedData\": `${encryptedMessage}`,\n      \"billingDetails\": {\n        \"line1\": \"Test\",\n        \"line2\": \"\",\n        \"city\": \"Test City\",\n        \"district\": \"MA\",\n        \"postalCode\": \"11111\",\n        \"country\": \"US\",\n        \"name\": \"Customer 0001\"\n      },\n      \"metadata\": {\n        \"phoneNumber\": \"+12025550180\",\n        \"email\": \"customer-0001@circle.com\",\n        \"sessionId\": \"xxx\",\n        \"ipAddress\": \"172.33.222.1\"\n      }\n    };\n    let config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    let cardResult = await axios.post(`${circleAPIBase}/v1/cards`, cardDetails, config);\n    /**\n     * sample returned response\n     */\n    //  cardResult = {\"data\":{\n    //    \"id\":\"bdf3e5d0-ef69-4864-9f6f-b6e254b4f7d8\", //important key, as this key will be used in the payment API to make the payment\n    //    \"status\":\"pending\",\"last4\":\"0007\",\"billingDetails\":{\"name\":\"Customer 0001\",\"line1\":\"Test\",\"city\":\"Test City\",\"postalCode\":\"11111\",\"district\":\"MA\",\"country\":\"US\"},\"expMonth\":1,\"expYear\":2025,\"network\":\"VISA\",\"bin\":\"400740\",\"issuerCountry\":\"ES\",\"fundingType\":\"debit\",\"fingerprint\":\"603b2185-1901-4eae-9b98-cc20c32d0709\",\"verification\":{\"cvv\":\"pending\",\"avs\":\"pending\"},\"createDate\":\"2021-09-26T22:35:19.195Z\",\"metadata\":{\"phoneNumber\":\"+12025550180\",\"email\":\"customer-0001@circle.com\"},\"updateDate\":\"2021-09-26T22:35:19.195Z\"}}\n\n    const cardReturnedKey = cardResult.data.data.id;\n    /** \n     * API call to make the payment with the card details\n     */\n\n    const paymentCardDetails = {\n      \"idempotencyKey\": `${uuidv4()}`,\n      \"amount\": {\n        \"amount\": `${amount}`,\n        \"currency\": \"USD\"\n      },\n      \"verification\": \"cvv\",\n      \"source\": {\n        \"id\": cardReturnedKey,\n        \"type\": \"card\"\n      },\n      \"description\": \"\",\n      \"channel\": \"\",\n      \"metadata\": {\n        \"phoneNumber\": \"+12025550180\",\n        \"email\": \"customer-0001@circle.com\",\n        \"sessionId\": \"xxx\",\n        \"ipAddress\": \"172.33.222.1\"\n      },\n      \"encryptedData\": `${encryptedMessage}`,\n      \"keyId\": keyId\n    };\n    config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    let paymentResult = await axios.post(`${circleAPIBase}/v1/payments`, paymentCardDetails, config);\n    /**\n     * Dummy payment response\n     */\n    // paymentResult = {\n    //   \"data\":{\n    //     \"id\":\"40f3d404-2d34-492b-af80-c29ae5e90588\", //paymentId of the transaction, we can query the status of the payment based on this key\n    //     \"type\":\"payment\",\n    //     \"merchantId\":\"c147a9bc-8c20-4665-9430-6612a099ed29\",\n    //     \"merchantWalletId\":\"1000176251\",\n    //     \"source\":{\"id\":\"bdf3e5d0-ef69-4864-9f6f-b6e254b4f7d8\",\"type\":\"card\"},\n    //     \"description\":\"Merchant Payment\",\"amount\":{\"amount\":\"5.00\",\"currency\":\"USD\"},\n    //     \"status\":\"pending\",\n    //     \"refunds\":[],\n    //     \"createDate\":\"2021-09-26T22:35:20.655Z\",\"updateDate\":\"2021-09-26T22:35:20.655Z\",\"metadata\":{\"phoneNumber\":\"+12025550180\",\"email\":\"customer-0001@circle.com\"}}}\n    // const paymentId = paymentResult.data.data.id\n\n    return {\n      status: true,\n      paymentData: paymentResult.data.data\n    };\n  } catch (err) {\n    return {\n      status: false,\n      error: err\n    };\n  }\n};\n/**\n * CircleAPI checkPaymentStatus\n */\n\nexport const checkPaymentStatus = async paymentId => {\n  try {\n    if (!paymentId) {\n      throw Error(\"Payment Id is required to fetch the payment status\");\n    }\n    /**\n     * API call to check \n     */\n\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    let paymentStatusResult = await axios.get(`${circleAPIBase}/v1/payments/${paymentId}`, config);\n    /**\n     * Dummy payment status \n     */\n    // paymentStatusResult = {\n    //    \"data\":{\n    //      \"id\":\"40f3d404-2d34-492b-af80-c29ae5e90588\",\"type\":\"payment\",\"merchantId\":\"c147a9bc-8c20-4665-9430-6612a099ed29\",\"merchantWalletId\":\"1000176251\",\"source\":{\"id\":\"bdf3e5d0-ef69-4864-9f6f-b6e254b4f7d8\",\"type\":\"card\"},\n    //      \"description\":\"Merchant Payment\",\"amount\":{\"amount\":\"5.00\",\"currency\":\"USD\"},\n    //      \"fees\":{\"amount\":\"0.45\",\"currency\":\"USD\"},\n    //      \"status\":\"confirmed\",\"verification\":{\"cvv\":\"pass\",\"avs\":\"Y\"},\"refunds\":[],\"createDate\":\"2021-09-26T22:35:20.655Z\",\"updateDate\":\"2021-09-26T22:35:21.393420Z\",\"metadata\":{\"phoneNumber\":\"+12025550180\",\"email\":\"customer-0001@circle.com\"}}}\n\n    if (paymentStatusResult.data.data.status === \"confirmed\") {\n      return {\n        status: true\n      };\n    }\n\n    return {\n      status: false\n    };\n  } catch (err) {\n    return {\n      status: false,\n      error: err\n    };\n  }\n};\nexport const requestSOLFromBackend = async (solAmount, selfPublicKey) => {\n  try {\n    /**\n     * API call to fetch the encryption key based on the token provided\n     */\n    let config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8'\n      }\n    };\n    const result = await axios.post(`${backendBase}/transferToken`, {\n      solAmount,\n      toPublicKey: selfPublicKey\n    }, config);\n\n    if (!result.status) {\n      return {\n        status: false,\n        message: \"Please check the sender account balance, if it has SOL balance to transfer.\"\n      };\n    }\n\n    return {\n      status: true,\n      message: \"Successfully Transferred the amount.\"\n    };\n  } catch (err) {\n    return {\n      status: false,\n      error: err\n    };\n  }\n};","map":{"version":3,"sources":["/Users/tashapais/Documents/Github/solana-games/src/utils/paymentGateway.js"],"names":["axios","openpgp","v4","uuidv4","circleAPIBase","backendBase","process","env","REACT_APP_BASE_APP","circleAPIAuthToken","REACT_APP_CIRCLE_API_AUTH_KEY","fetchPCIKeys","config","headers","result","get","encryptionPublicKey","data","publicKey","keyId","status","err","error","makePayment","paymentParams","amount","key","exampleCards","title","formData","cardNumber","cvv","expiry","month","year","name","country","district","line1","line2","city","postalCode","phoneNumber","email","tempDetails","number","trim","replace","Error","decodedPublicKey","Buffer","from","toString","options","message","fromText","JSON","stringify","publicKeys","readArmored","keys","ciphertext","encrypt","encryptedMessage","cardDetails","cardResult","post","cardReturnedKey","id","paymentCardDetails","paymentResult","paymentData","checkPaymentStatus","paymentId","paymentStatusResult","requestSOLFromBackend","solAmount","selfPublicKey","toPublicKey"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as openpgp from 'openpgp'\nimport { v4 as uuidv4 } from 'uuid';\n/**\n  * CircleAPI implementation\n  * @returns \n  */\nexport const circleAPIBase = 'https://api-sandbox.circle.com'\nexport const backendBase = process.env.REACT_APP_BASE_APP\nexport const circleAPIAuthToken = process.env.REACT_APP_CIRCLE_API_AUTH_KEY\nexport const fetchPCIKeys = async () => {\n  try {\n\n    /**\n     * API call to fetch the encryption key based on the token provided\n     */\n    let config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    const result = await axios.get(`${circleAPIBase}/v1/encryption/public`, config)\n    const encryptionPublicKey = result.data.data.publicKey\n    const keyId = result.data.data.keyId\n    return {\n      encryptionPublicKey,\n      keyId,\n      status: true\n    }\n\n  } catch (err) {\n    return {\n      status: true,\n      error: err\n    }\n  }\n\n}\n\nexport const makePayment = async (paymentParams) => {\n  try {\n\n    const keyId = paymentParams.keyId\n    const publicKey = paymentParams.encryptionPublicKey\n    const amount = paymentParams.amount\n    const key = {\n      keyId,\n      publicKey\n    }\n\n\n    const exampleCards = [\n      {\n        title: '4007400000000007 (visa)',\n        formData: {\n          cardNumber: '4007400000000007',\n          cvv: '123',\n          expiry: {\n            month: '01',\n            year: '2025',\n          },\n          name: 'Customer 0001',\n          country: 'US',\n          district: 'MA',\n          line1: 'Test',\n          line2: '',\n          city: 'Test City',\n          postalCode: '11111',\n          phoneNumber: '+12025550180',\n          email: 'customer-0001@circle.com',\n        },\n      }\n    ]\n\n    const tempDetails = {\n      number: exampleCards[0].formData.cardNumber.trim().replace(/\\D/g, ''),\n      cvv: exampleCards[0].formData.cvv\n    }\n\n    if (!publicKey || !keyId) {\n      throw new Error('Unable to encrypt data')\n    }\n    //atob\n    const decodedPublicKey = Buffer.from(publicKey, 'base64').toString('binary')\n    const options = {\n      message: await openpgp.message.fromText(JSON.stringify(tempDetails)),\n      publicKeys: (await openpgp.key.readArmored(decodedPublicKey)).keys,\n    }\n\n    const ciphertext = await openpgp.encrypt(options)\n    //btoa\n    const encryptedMessage = Buffer.from(ciphertext.data).toString('base64')\n    /**\n   * API call to save the card details\n   */\n    const cardDetails = {\n      \"idempotencyKey\": `${uuidv4()}`,\n      \"expMonth\": 1, \"expYear\": 2025, \"keyId\": `${keyId}`,\n      \"encryptedData\": `${encryptedMessage}`, \"billingDetails\": { \"line1\": \"Test\", \"line2\": \"\", \"city\": \"Test City\", \"district\": \"MA\", \"postalCode\": \"11111\", \"country\": \"US\", \"name\": \"Customer 0001\" },\n      \"metadata\": { \"phoneNumber\": \"+12025550180\", \"email\": \"customer-0001@circle.com\", \"sessionId\": \"xxx\", \"ipAddress\": \"172.33.222.1\" }\n    }\n\n    let config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    let cardResult = await axios.post(`${circleAPIBase}/v1/cards`, cardDetails, config)\n\n    /**\n     * sample returned response\n     */\n    //  cardResult = {\"data\":{\n    //    \"id\":\"bdf3e5d0-ef69-4864-9f6f-b6e254b4f7d8\", //important key, as this key will be used in the payment API to make the payment\n    //    \"status\":\"pending\",\"last4\":\"0007\",\"billingDetails\":{\"name\":\"Customer 0001\",\"line1\":\"Test\",\"city\":\"Test City\",\"postalCode\":\"11111\",\"district\":\"MA\",\"country\":\"US\"},\"expMonth\":1,\"expYear\":2025,\"network\":\"VISA\",\"bin\":\"400740\",\"issuerCountry\":\"ES\",\"fundingType\":\"debit\",\"fingerprint\":\"603b2185-1901-4eae-9b98-cc20c32d0709\",\"verification\":{\"cvv\":\"pending\",\"avs\":\"pending\"},\"createDate\":\"2021-09-26T22:35:19.195Z\",\"metadata\":{\"phoneNumber\":\"+12025550180\",\"email\":\"customer-0001@circle.com\"},\"updateDate\":\"2021-09-26T22:35:19.195Z\"}}\n\n\n    const cardReturnedKey = cardResult.data.data.id\n    /** \n     * API call to make the payment with the card details\n     */\n\n    const paymentCardDetails = {\n      \"idempotencyKey\": `${uuidv4()}`,\n      \"amount\": { \"amount\": `${amount}`, \"currency\": \"USD\" },\n      \"verification\": \"cvv\", \"source\": {\n        \"id\": cardReturnedKey,\n        \"type\": \"card\"\n      },\n      \"description\": \"\", \"channel\": \"\",\n      \"metadata\": {\n        \"phoneNumber\": \"+12025550180\", \"email\": \"customer-0001@circle.com\", \"sessionId\": \"xxx\", \"ipAddress\": \"172.33.222.1\"\n      },\n      \"encryptedData\": `${encryptedMessage}`,\n      \"keyId\": keyId\n    }\n\n    config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    let paymentResult = await axios.post(`${circleAPIBase}/v1/payments`, paymentCardDetails, config)\n\n\n    /**\n     * Dummy payment response\n     */\n    // paymentResult = {\n    //   \"data\":{\n    //     \"id\":\"40f3d404-2d34-492b-af80-c29ae5e90588\", //paymentId of the transaction, we can query the status of the payment based on this key\n    //     \"type\":\"payment\",\n    //     \"merchantId\":\"c147a9bc-8c20-4665-9430-6612a099ed29\",\n    //     \"merchantWalletId\":\"1000176251\",\n    //     \"source\":{\"id\":\"bdf3e5d0-ef69-4864-9f6f-b6e254b4f7d8\",\"type\":\"card\"},\n    //     \"description\":\"Merchant Payment\",\"amount\":{\"amount\":\"5.00\",\"currency\":\"USD\"},\n    //     \"status\":\"pending\",\n    //     \"refunds\":[],\n    //     \"createDate\":\"2021-09-26T22:35:20.655Z\",\"updateDate\":\"2021-09-26T22:35:20.655Z\",\"metadata\":{\"phoneNumber\":\"+12025550180\",\"email\":\"customer-0001@circle.com\"}}}\n\n\n    // const paymentId = paymentResult.data.data.id\n    return { status: true, paymentData: paymentResult.data.data }\n\n  }\n  catch (err) {\n    return {\n      status: false,\n      error: err\n    }\n  }\n}\n\n\n/**\n * CircleAPI checkPaymentStatus\n */\n\nexport const checkPaymentStatus = async (paymentId) => {\n  try {\n\n    if (!paymentId) {\n      throw Error(\"Payment Id is required to fetch the payment status\")\n    }\n    /**\n     * API call to check \n     */\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    let paymentStatusResult = await axios.get(`${circleAPIBase}/v1/payments/${paymentId}`, config)\n    /**\n     * Dummy payment status \n     */\n    // paymentStatusResult = {\n    //    \"data\":{\n    //      \"id\":\"40f3d404-2d34-492b-af80-c29ae5e90588\",\"type\":\"payment\",\"merchantId\":\"c147a9bc-8c20-4665-9430-6612a099ed29\",\"merchantWalletId\":\"1000176251\",\"source\":{\"id\":\"bdf3e5d0-ef69-4864-9f6f-b6e254b4f7d8\",\"type\":\"card\"},\n    //      \"description\":\"Merchant Payment\",\"amount\":{\"amount\":\"5.00\",\"currency\":\"USD\"},\n    //      \"fees\":{\"amount\":\"0.45\",\"currency\":\"USD\"},\n    //      \"status\":\"confirmed\",\"verification\":{\"cvv\":\"pass\",\"avs\":\"Y\"},\"refunds\":[],\"createDate\":\"2021-09-26T22:35:20.655Z\",\"updateDate\":\"2021-09-26T22:35:21.393420Z\",\"metadata\":{\"phoneNumber\":\"+12025550180\",\"email\":\"customer-0001@circle.com\"}}}\n\n\n    if (paymentStatusResult.data.data.status === \"confirmed\") {\n\n      return {\n        status: true\n      }\n\n    }\n    return {\n      status: false\n    }\n  } catch (err) {\n    return {\n      status: false,\n      error: err\n    }\n  }\n}\n\nexport const requestSOLFromBackend = async (solAmount, selfPublicKey) => {\n  try {\n\n    /**\n     * API call to fetch the encryption key based on the token provided\n     */\n    let config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8'\n      }\n    };\n    const result = await axios.post(`${backendBase}/transferToken`, {\n      solAmount,\n      toPublicKey: selfPublicKey\n    }, config)\n    if (!result.status) {\n      return {\n        status: false,\n        message: \"Please check the sender account balance, if it has SOL balance to transfer.\"\n      }\n    }\n\n    return {\n      status: true,\n      message: \"Successfully Transferred the amount.\"\n    }\n\n  } catch (err) {\n    return {\n      status: false,\n      error: err\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}