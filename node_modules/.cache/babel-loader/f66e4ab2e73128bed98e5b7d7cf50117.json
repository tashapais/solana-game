{"ast":null,"code":"var _jsxFileName = \"/Users/tashapais/Documents/Github/solana-games/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport stack from './assets/images/stack.png';\nimport './App.css';\nimport { useHistory } from 'react-router';\nimport { clusterApiUrl, Connection, LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\nimport { Link } from \"react-router-dom\";\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport { transferCustomToken } from './utils/transferToken';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NETWORK = clusterApiUrl(\"devnet\");\nlet lamportsRequiredToPlay = 0.1 * LAMPORTS_PER_SOL;\nconst gameWalletPublicKey = new PublicKey(\"62AtDMhgaW1YQZCxv7hGBE7HDTU67L71vs4VQrRVBq3p\");\n\nfunction App() {\n  _s();\n\n  const [provider, setProvider] = useState();\n  const [providerPubKey, setProviderPub] = useState();\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  /**\n   * \n   * Connection to the Solana cluster\n   */\n\n  const connection = new Connection(NETWORK);\n\n  const playStack = async () => {\n    /**\n     * Flow to play the game\n     * 1. Check if the user is logged in\n     * 2. Check the wallet has SOL in it\n     * 3. If no SOL then ask him to fund the wallet first\n     * 4. If required SOL present the, proceed with the transaction\n     * \n     */\n\n    /**\n     * Check if the user is logged in\n     */\n    if (!providerPubKey) {\n      alert(\"Ooops... Please login via wallet\");\n      return;\n    }\n    /**\n     * Check if the user has SOL in his wallet\n     */\n\n\n    const accountBalance = await connection.getBalance(providerPubKey);\n    const balanceInLamports = accountBalance ? parseInt(accountBalance) : 0;\n\n    if (balanceInLamports < lamportsRequiredToPlay) {\n      // alert(\"Not enough balance, please fund your wallet\")\n      const fundNeededToPlay = lamportsRequiredToPlay - balanceInLamports;\n      const optionsNoBalance = {\n        childrenElement: () => /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 32\n        }, this),\n        customUI: _ref => {\n          let {\n            onClose\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"box\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-container\",\n              id: \"m2-o\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"modal\",\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  className: \"modal__title\",\n                  children: \"Oops!!! You do not have enough balance\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"modal__text\",\n                  children: [\"Please fund your wallet with\", ' ', /*#__PURE__*/_jsxDEV(\"b\", {\n                    children: [fundNeededToPlay / LAMPORTS_PER_SOL, \" SOL\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 74,\n                    columnNumber: 19\n                  }, this), \" tokens to play the game.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"modal__btn no\",\n                  onClick: onClose,\n                  children: \"No\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"modal__btn yes\",\n                  onClick: () => {\n                    history.push(`/purchase/stack`);\n                    onClose();\n                  },\n                  children: \"Fund wallet\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }, this);\n        },\n        closeOnEscape: true,\n        closeOnClickOutside: true,\n        willUnmount: () => {},\n        afterClose: () => {},\n        onClickOutside: () => {},\n        onKeypressEscape: () => {},\n        overlayClassName: 'overlay-custom-class-name'\n      };\n      confirmAlert(optionsNoBalance);\n      return;\n    }\n    /**\n     * If user has required SOL in the wallet, then deduct the amount\n     */\n\n\n    setLoading(true);\n    lamportsRequiredToPlay = lamportsRequiredToPlay / LAMPORTS_PER_SOL;\n    const result = await transferCustomToken(provider, connection, lamportsRequiredToPlay, providerPubKey, gameWalletPublicKey);\n\n    if (!result.status) {\n      alert(\"Error in sending the tokens, Please try again!!!\");\n      return;\n    }\n    /**\n     * If the status is true, that means transaction got successful and we can proceed\n     */\n\n\n    setLoading(false);\n    history.push('/stack');\n  };\n\n  const loginHandler = () => {\n    if (!provider && window.solana) {\n      setProvider(window.solana);\n    } else if (!provider) {\n      console.log(\"No provider found\");\n      return;\n    } else if (provider && !provider.isConnected) {\n      provider.connect();\n    }\n  };\n  /**\n   * React will call this useEffect everytime there is update in the provider variable.\n   * Phantom provider provides 2 methods to listen on\n   * 1. connect -> This method gets triggered when the wallet connection is successful\n   * 2. disconnect -> This callback method gets triggered when the wallet gets disconnected from the application\n   */\n\n\n  useEffect(() => {\n    if (provider) {\n      provider.on(\"connect\", async () => {\n        console.log(\"wallet got connected\", provider.publicKey);\n        setProviderPub(provider.publicKey);\n      });\n      provider.on(\"disconnect\", () => {\n        console.log(\"Disconnected from wallet\");\n      });\n    }\n  }, [provider]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"gameHeader\",\n          children: \"STACK GAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 23\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), !providerPubKey && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"loginButton\",\n        onClick: () => loginHandler(),\n        children: \" Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }, this), providerPubKey && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: providerPubKey.toBase58()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameThumbnail\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"amountNeed\",\n        children: \"SOL needed to play: 0.1 SOL \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: stack,\n        alt: \"Stack Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"playButton\",\n        onClick: () => playStack(),\n        children: loading ? \"Transferring SOL ...\" : \"Play Stack It\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Odb1TliT+ire2f4Ij7HROhV9Qy8=\", false, function () {\n  return [useHistory];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tashapais/Documents/Github/solana-games/src/App.js"],"names":["useEffect","useState","stack","useHistory","clusterApiUrl","Connection","LAMPORTS_PER_SOL","PublicKey","Link","confirmAlert","transferCustomToken","NETWORK","lamportsRequiredToPlay","gameWalletPublicKey","App","provider","setProvider","providerPubKey","setProviderPub","loading","setLoading","history","connection","playStack","alert","accountBalance","getBalance","balanceInLamports","parseInt","fundNeededToPlay","optionsNoBalance","childrenElement","customUI","onClose","push","closeOnEscape","closeOnClickOutside","willUnmount","afterClose","onClickOutside","onKeypressEscape","overlayClassName","result","status","loginHandler","window","solana","console","log","isConnected","connect","on","publicKey","toBase58"],"mappings":"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","sourcesContent":["\nimport { useEffect, useState } from 'react';\nimport stack from './assets/images/stack.png'\nimport './App.css';\nimport { useHistory } from 'react-router';\nimport {\n  clusterApiUrl, Connection, LAMPORTS_PER_SOL, PublicKey,\n} from \"@solana/web3.js\";\nimport {\n  Link,\n} from \"react-router-dom\";\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport { transferCustomToken } from './utils/transferToken';\nconst NETWORK = clusterApiUrl(\"devnet\");\nlet lamportsRequiredToPlay = 0.1 * LAMPORTS_PER_SOL\nconst gameWalletPublicKey = new PublicKey(\"62AtDMhgaW1YQZCxv7hGBE7HDTU67L71vs4VQrRVBq3p\")\n\nfunction App() {\n\n  const [provider, setProvider] = useState()\n  const [providerPubKey, setProviderPub] = useState()\n  const [loading, setLoading] = useState(false)\n  const history = useHistory()\n\n  /**\n   * \n   * Connection to the Solana cluster\n   */\n\n  const connection = new Connection(NETWORK);\n\n  const playStack = async () => {\n    /**\n     * Flow to play the game\n     * 1. Check if the user is logged in\n     * 2. Check the wallet has SOL in it\n     * 3. If no SOL then ask him to fund the wallet first\n     * 4. If required SOL present the, proceed with the transaction\n     * \n     */\n\n    /**\n     * Check if the user is logged in\n     */\n    if (!providerPubKey) {\n      alert(\"Ooops... Please login via wallet\")\n      return\n    }\n\n    /**\n     * Check if the user has SOL in his wallet\n     */\n    const accountBalance = await connection.getBalance(providerPubKey)\n    const balanceInLamports = accountBalance ? parseInt(accountBalance) : 0\n    if (balanceInLamports < lamportsRequiredToPlay) {\n      // alert(\"Not enough balance, please fund your wallet\")\n      const fundNeededToPlay =\n        lamportsRequiredToPlay - balanceInLamports;\n      const optionsNoBalance = {\n        childrenElement: () => <div />,\n        customUI: ({ onClose }) => (\n          <div className=\"box\">\n            <div className=\"modal-container\" id=\"m2-o\">\n              <div className=\"modal\">\n                {/* <div className=\"image-holder\">\n                    <img src={coins} alt=\"\" />\n                  </div> */}\n                <h1 className=\"modal__title\">\n                  Oops!!! You do not have enough balance\n                </h1>\n                <p className=\"modal__text\">\n                  Please fund your wallet with{' '}\n                  <b>{fundNeededToPlay / LAMPORTS_PER_SOL} SOL</b> tokens to\n                  play the game.\n                </p>\n                <button className=\"modal__btn no\" onClick={onClose}>\n                  No\n                </button>\n                <button\n                  className=\"modal__btn yes\"\n                  onClick={() => {\n                    history.push(`/purchase/stack`);\n                    onClose();\n                  }}\n                >\n                  Fund wallet\n                </button>\n              </div>\n            </div>\n          </div>\n        ),\n        closeOnEscape: true,\n        closeOnClickOutside: true,\n        willUnmount: () => { },\n        afterClose: () => { },\n        onClickOutside: () => { },\n        onKeypressEscape: () => { },\n        overlayClassName: 'overlay-custom-class-name',\n      };\n\n      confirmAlert(optionsNoBalance);\n      return\n    }\n\n    /**\n     * If user has required SOL in the wallet, then deduct the amount\n     */\n    setLoading(true)\n    lamportsRequiredToPlay = lamportsRequiredToPlay / LAMPORTS_PER_SOL\n    const result = await transferCustomToken(provider, connection, lamportsRequiredToPlay, providerPubKey, gameWalletPublicKey)\n\n    if (!result.status) {\n      alert(\"Error in sending the tokens, Please try again!!!\")\n      return\n    }\n\n\n    /**\n     * If the status is true, that means transaction got successful and we can proceed\n     */\n    setLoading(false)\n    history.push('/stack')\n\n  }\n\n  const loginHandler = () => {\n    if (!provider && window.solana) {\n      setProvider(window.solana)\n    } else if (!provider) {\n      console.log(\"No provider found\")\n      return\n    } else if (provider && !provider.isConnected) {\n      provider.connect()\n    }\n  }\n\n  /**\n   * React will call this useEffect everytime there is update in the provider variable.\n   * Phantom provider provides 2 methods to listen on\n   * 1. connect -> This method gets triggered when the wallet connection is successful\n   * 2. disconnect -> This callback method gets triggered when the wallet gets disconnected from the application\n   */\n\n  useEffect(() => {\n    if (provider) {\n      provider.on(\"connect\", async () => {\n        console.log(\"wallet got connected\", provider.publicKey)\n        setProviderPub(provider.publicKey)\n\n      });\n      provider.on(\"disconnect\", () => {\n        console.log(\"Disconnected from wallet\");\n      });\n    }\n  }, [provider]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <Link to=\"/\"> <h2 className=\"gameHeader\">STACK GAME</h2> </Link>\n\n        {!providerPubKey && <button className=\"loginButton\" onClick={() => loginHandler()}> Login</button>}\n        {providerPubKey && <span>{providerPubKey.toBase58()}</span>}\n      </header>\n      <div className=\"gameThumbnail\">\n        <div className=\"amountNeed\">SOL needed to play: 0.1 SOL </div>\n        <img src={stack} alt=\"Stack Game\" />\n        <button className=\"playButton\" onClick={() => playStack()}>{loading ? \"Transferring SOL ...\" : \"Play Stack It\"}</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}