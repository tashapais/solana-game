{"ast":null,"code":"import Payment from \"payment\";\n\nfunction clearNumber() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return value.replace(/\\D+/g, \"\");\n}\n\nexport function formatCreditCardNumber(value) {\n  if (!value) {\n    return value;\n  }\n\n  const issuer = Payment.fns.cardType(value);\n  const clearValue = clearNumber(value);\n  let nextValue;\n\n  switch (issuer) {\n    case \"amex\":\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 10)} ${clearValue.slice(10, 15)}`;\n      break;\n\n    case \"dinersclub\":\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 10)} ${clearValue.slice(10, 14)}`;\n      break;\n\n    default:\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(4, 8)} ${clearValue.slice(8, 12)} ${clearValue.slice(12, 19)}`;\n      break;\n  }\n\n  return nextValue.trim();\n}\nexport function formatCVC(value, prevValue) {\n  let allValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const clearValue = clearNumber(value);\n  let maxLength = 4;\n\n  if (allValues.number) {\n    const issuer = Payment.fns.cardType(allValues.number);\n    maxLength = issuer === \"amex\" ? 4 : 3;\n  }\n\n  return clearValue.slice(0, maxLength);\n}\nexport function formatNumber(value, prevValue) {\n  let allValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const clearValue = clearNumber(value);\n  return clearValue;\n}\nexport function formatExpirationDate(value) {\n  const clearValue = clearNumber(value);\n\n  if (clearValue.length >= 3) {\n    return `${clearValue.slice(0, 2)}/${clearValue.slice(2, 4)}`;\n  }\n\n  return clearValue;\n}\nexport function formatFormData(data) {\n  return Object.keys(data).map(d => `${d}: ${data[d]}`);\n}","map":{"version":3,"sources":["/Users/tashapais/Documents/Github/solana-games/src/utils/cardUtils.js"],"names":["Payment","clearNumber","value","replace","formatCreditCardNumber","issuer","fns","cardType","clearValue","nextValue","slice","trim","formatCVC","prevValue","allValues","maxLength","number","formatNumber","formatExpirationDate","length","formatFormData","data","Object","keys","map","d"],"mappings":"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","sourcesContent":["import Payment from \"payment\";\n\nfunction clearNumber(value = \"\") {\n  return value.replace(/\\D+/g, \"\");\n}\n\nexport function formatCreditCardNumber(value) {\n  if (!value) {\n    return value;\n  }\n\n  const issuer = Payment.fns.cardType(value);\n  const clearValue = clearNumber(value);\n  let nextValue;\n\n  switch (issuer) {\n    case \"amex\":\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(\n        4,\n        10\n      )} ${clearValue.slice(10, 15)}`;\n      break;\n    case \"dinersclub\":\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(\n        4,\n        10\n      )} ${clearValue.slice(10, 14)}`;\n      break;\n    default:\n      nextValue = `${clearValue.slice(0, 4)} ${clearValue.slice(\n        4,\n        8\n      )} ${clearValue.slice(8, 12)} ${clearValue.slice(12, 19)}`;\n      break;\n  }\n\n  return nextValue.trim();\n}\n\nexport function formatCVC(value, prevValue, allValues = {}) {\n  const clearValue = clearNumber(value);\n  let maxLength = 4;\n\n  if (allValues.number) {\n    const issuer = Payment.fns.cardType(allValues.number);\n    maxLength = issuer === \"amex\" ? 4 : 3;\n  }\n\n  return clearValue.slice(0, maxLength);\n}\n\nexport function formatNumber(value, prevValue, allValues = {}) {\n  const clearValue = clearNumber(value);\n\n  return clearValue;\n}\n\n\nexport function formatExpirationDate(value) {\n  const clearValue = clearNumber(value);\n\n  if (clearValue.length >= 3) {\n    return `${clearValue.slice(0, 2)}/${clearValue.slice(2, 4)}`;\n  }\n\n  return clearValue;\n}\n\nexport function formatFormData(data) {\n  return Object.keys(data).map(d => `${d}: ${data[d]}`);\n}\n"]},"metadata":{},"sourceType":"module"}